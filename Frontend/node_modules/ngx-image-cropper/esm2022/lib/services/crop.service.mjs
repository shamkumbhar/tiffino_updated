import { resizeCanvas } from '../utils/resize.utils';
import { percentage } from '../utils/percentage.utils';
export class CropService {
    crop(input, output) {
        const imagePosition = this.getImagePosition(input);
        const width = imagePosition.x2 - imagePosition.x1;
        const height = imagePosition.y2 - imagePosition.y1;
        const cropCanvas = document.createElement('canvas');
        cropCanvas.width = width;
        cropCanvas.height = height;
        const ctx = cropCanvas.getContext('2d');
        if (!ctx) {
            return null;
        }
        if (input.options?.backgroundColor != null) {
            ctx.fillStyle = input.options.backgroundColor;
            ctx.fillRect(0, 0, width, height);
        }
        const scaleX = (input.transform?.scale || 1) * (input.transform?.flipH ? -1 : 1);
        const scaleY = (input.transform?.scale || 1) * (input.transform?.flipV ? -1 : 1);
        const { translateH, translateV } = this.getCanvasTranslate(input);
        const transformedImage = input.loadedImage.transformed;
        ctx.setTransform(scaleX, 0, 0, scaleY, transformedImage.size.width / 2 + translateH, transformedImage.size.height / 2 + translateV);
        ctx.translate(-imagePosition.x1 / scaleX, -imagePosition.y1 / scaleY);
        ctx.rotate((input.transform?.rotate || 0) * Math.PI / 180);
        ctx.drawImage(transformedImage.image, -transformedImage.size.width / 2, -transformedImage.size.height / 2);
        const result = {
            width, height,
            imagePosition,
            cropperPosition: { ...input.cropper }
        };
        if (input.options?.containWithinAspectRatio) {
            result.offsetImagePosition = this.getOffsetImagePosition(input);
        }
        const resizeRatio = this.getResizeRatio(width, height, input.options);
        if (resizeRatio !== 1) {
            result.width = Math.round(width * resizeRatio);
            result.height = input.options?.maintainAspectRatio
                ? Math.round(result.width / (input.options?.aspectRatio ?? 1))
                : Math.round(height * resizeRatio);
            resizeCanvas(cropCanvas, result.width, result.height);
        }
        if (output === 'blob') {
            return this.cropToBlob(result, cropCanvas, input);
        }
        else {
            result.base64 = cropCanvas.toDataURL('image/' + (input.options?.format ?? 'png'), this.getQuality(input.options));
            return result;
        }
    }
    async cropToBlob(output, cropCanvas, input) {
        output.blob = await new Promise(resolve => cropCanvas.toBlob(resolve, 'image/' + (input.options?.format ?? 'png'), this.getQuality(input.options)));
        if (output.blob) {
            output.objectUrl = URL.createObjectURL(output.blob);
        }
        return output;
    }
    getCanvasTranslate(input) {
        if (input.transform?.translateUnit === 'px') {
            const ratio = this.getRatio(input);
            return {
                translateH: (input.transform?.translateH || 0) * ratio,
                translateV: (input.transform?.translateV || 0) * ratio
            };
        }
        else {
            return {
                translateH: input.transform?.translateH ? percentage(input.transform.translateH, input.loadedImage.transformed.size.width) : 0,
                translateV: input.transform?.translateV ? percentage(input.transform.translateV, input.loadedImage.transformed.size.height) : 0
            };
        }
    }
    getRatio(input) {
        return input.loadedImage.transformed.size.width / input.maxSize.width;
    }
    getImagePosition(cropperState) {
        const ratio = this.getRatio(cropperState);
        const out = {
            x1: Math.round(cropperState.cropper.x1 * ratio),
            y1: Math.round(cropperState.cropper.y1 * ratio),
            x2: Math.round(cropperState.cropper.x2 * ratio),
            y2: Math.round(cropperState.cropper.y2 * ratio)
        };
        if (!cropperState.options?.containWithinAspectRatio) {
            out.x1 = Math.max(out.x1, 0);
            out.y1 = Math.max(out.y1, 0);
            out.x2 = Math.min(out.x2, cropperState.loadedImage.transformed.size.width);
            out.y2 = Math.min(out.y2, cropperState.loadedImage.transformed.size.height);
        }
        return out;
    }
    getOffsetImagePosition(input) {
        const canvasRotation = (input.options?.canvasRotation ?? 0) + input.loadedImage.exifTransform.rotate;
        const ratio = this.getRatio(input);
        let offsetX;
        let offsetY;
        if (canvasRotation % 2) {
            offsetX = (input.loadedImage.transformed.size.width - input.loadedImage.original.size.height) / 2;
            offsetY = (input.loadedImage.transformed.size.height - input.loadedImage.original.size.width) / 2;
        }
        else {
            offsetX = (input.loadedImage.transformed.size.width - input.loadedImage.original.size.width) / 2;
            offsetY = (input.loadedImage.transformed.size.height - input.loadedImage.original.size.height) / 2;
        }
        const cropper = input.cropper;
        const out = {
            x1: Math.round(cropper.x1 * ratio) - offsetX,
            y1: Math.round(cropper.y1 * ratio) - offsetY,
            x2: Math.round(cropper.x2 * ratio) - offsetX,
            y2: Math.round(cropper.y2 * ratio) - offsetY
        };
        if (!input.options?.containWithinAspectRatio) {
            out.x1 = Math.max(out.x1, 0);
            out.y1 = Math.max(out.y1, 0);
            out.x2 = Math.min(out.x2, input.loadedImage.transformed.size.width);
            out.y2 = Math.min(out.y2, input.loadedImage.transformed.size.height);
        }
        return out;
    }
    getResizeRatio(width, height, options) {
        const ratios = new Array();
        if (options?.resizeToWidth && options.resizeToWidth > 0) {
            ratios.push(options.resizeToWidth / width);
        }
        if (options?.resizeToHeight && options.resizeToHeight > 0) {
            ratios.push(options.resizeToHeight / height);
        }
        const result = ratios.length === 0 ? 1 : Math.min(...ratios);
        if (result > 1 && !options?.onlyScaleDown) {
            return result;
        }
        return Math.min(result, 1);
    }
    getQuality(options) {
        return Math.min(1, Math.max(0, (options?.imageQuality ?? 92) / 100));
    }
}
//# sourceMappingURL=data:application/json;base64,